# Generated from CoreDSL2.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,104,793,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,1,0,5,0,98,8,0,10,0,12,0,101,9,0,1,0,4,0,104,8,
        0,11,0,12,0,105,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,117,8,2,
        10,2,12,2,120,9,2,3,2,122,8,2,1,2,1,2,4,2,126,8,2,11,2,12,2,127,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,138,8,2,10,2,12,2,141,9,2,3,
        2,143,8,2,1,2,1,2,5,2,147,8,2,10,2,12,2,150,9,2,1,2,3,2,153,8,2,
        1,3,1,3,1,3,1,3,1,3,1,3,4,3,161,8,3,11,3,12,3,162,1,3,1,3,1,3,1,
        3,1,3,4,3,170,8,3,11,3,12,3,171,1,3,1,3,1,3,1,3,5,3,178,8,3,10,3,
        12,3,181,9,3,1,3,1,3,4,3,185,8,3,11,3,12,3,186,1,3,1,3,1,3,1,3,5,
        3,193,8,3,10,3,12,3,196,9,3,1,3,1,3,4,3,200,8,3,11,3,12,3,201,1,
        3,1,3,3,3,206,8,3,1,4,1,4,5,4,210,8,4,10,4,12,4,213,9,4,1,4,1,4,
        1,5,1,5,5,5,219,8,5,10,5,12,5,222,9,5,1,5,1,5,1,5,1,5,1,5,1,5,5,
        5,230,8,5,10,5,12,5,233,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        3,5,244,8,5,1,5,3,5,247,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,
        257,8,6,10,6,12,6,260,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,271,8,7,1,8,1,8,1,8,1,8,1,8,3,8,278,8,8,1,8,1,8,5,8,282,8,8,10,
        8,12,8,285,9,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,293,8,8,1,8,1,8,5,8,297,
        8,8,10,8,12,8,300,9,8,1,8,1,8,3,8,304,8,8,3,8,306,8,8,1,9,1,9,1,
        9,5,9,311,8,9,10,9,12,9,314,9,9,1,10,1,10,3,10,318,8,10,1,11,1,11,
        1,11,1,11,1,11,1,11,5,11,326,8,11,10,11,12,11,329,9,11,3,11,331,
        8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,5,11,347,8,11,10,11,12,11,350,9,11,1,11,1,11,3,11,354,
        8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,5,11,382,8,11,10,11,12,11,385,9,11,1,11,5,11,388,8,11,10,11,
        12,11,391,9,11,1,11,1,11,1,11,1,11,3,11,397,8,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,409,8,11,1,12,4,12,412,8,
        12,11,12,12,12,413,1,12,4,12,417,8,12,11,12,12,12,418,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,427,8,13,1,14,1,14,5,14,431,8,14,10,14,
        12,14,434,9,14,1,14,1,14,1,15,1,15,3,15,440,8,15,1,16,1,16,3,16,
        444,8,16,1,16,3,16,447,8,16,1,16,3,16,450,8,16,1,16,1,16,1,16,1,
        16,5,16,456,8,16,10,16,12,16,459,9,16,3,16,461,8,16,1,17,1,17,1,
        17,5,17,466,8,17,10,17,12,17,469,9,17,1,17,1,17,1,17,1,17,5,17,475,
        8,17,10,17,12,17,478,9,17,3,17,480,8,17,1,17,1,17,1,18,1,18,1,18,
        3,18,487,8,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,495,8,19,1,19,1,
        19,1,19,1,19,1,19,1,19,3,19,503,8,19,1,19,1,19,5,19,507,8,19,10,
        19,12,19,510,9,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,519,8,
        19,1,19,1,19,1,19,3,19,524,8,19,1,19,1,19,1,19,1,19,3,19,530,8,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,5,23,546,8,23,10,23,12,23,549,9,23,1,23,1,23,3,23,553,8,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,566,
        8,24,1,24,1,24,1,25,1,25,1,25,5,25,573,8,25,10,25,12,25,576,9,25,
        1,26,1,26,1,26,1,26,3,26,582,8,26,1,27,1,27,1,27,1,27,5,27,588,8,
        27,10,27,12,27,591,9,27,1,27,1,27,1,28,1,28,3,28,597,8,28,1,29,1,
        29,1,29,1,29,1,29,5,29,604,8,29,10,29,12,29,607,9,29,1,29,5,29,610,
        8,29,10,29,12,29,613,9,29,1,29,1,29,3,29,617,8,29,1,30,1,30,1,30,
        1,30,3,30,623,8,30,1,30,1,30,3,30,627,8,30,1,31,1,31,3,31,631,8,
        31,1,31,1,31,1,31,3,31,636,8,31,5,31,638,8,31,10,31,12,31,641,9,
        31,1,32,4,32,644,8,32,11,32,12,32,645,1,32,1,32,1,32,1,33,1,33,1,
        33,1,33,1,33,1,33,3,33,657,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,5,34,668,8,34,10,34,12,34,671,9,34,3,34,673,8,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,685,8,34,1,
        34,1,34,1,34,3,34,690,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,3,34,739,8,34,1,34,1,34,1,34,1,34,5,34,745,8,34,10,34,12,34,748,
        9,34,1,35,1,35,1,35,4,35,753,8,35,11,35,12,35,754,1,35,1,35,1,35,
        1,35,3,35,761,8,35,1,36,1,36,1,37,1,37,1,37,1,37,3,37,769,8,37,1,
        38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,
        43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,0,1,68,48,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,0,19,1,0,19,20,1,0,43,44,1,0,45,48,1,0,49,50,1,0,54,55,1,0,56,
        57,2,0,36,37,58,59,1,0,60,61,2,0,36,36,62,63,1,0,58,59,1,0,64,65,
        2,0,38,39,66,67,1,0,68,69,2,0,52,52,75,85,1,0,100,101,3,0,40,41,
        43,50,86,86,1,0,87,88,2,0,21,21,89,90,1,0,91,92,877,0,99,1,0,0,0,
        2,107,1,0,0,0,4,152,1,0,0,0,6,205,1,0,0,0,8,207,1,0,0,0,10,216,1,
        0,0,0,12,253,1,0,0,0,14,270,1,0,0,0,16,305,1,0,0,0,18,307,1,0,0,
        0,20,315,1,0,0,0,22,408,1,0,0,0,24,411,1,0,0,0,26,426,1,0,0,0,28,
        428,1,0,0,0,30,439,1,0,0,0,32,446,1,0,0,0,34,467,1,0,0,0,36,483,
        1,0,0,0,38,529,1,0,0,0,40,531,1,0,0,0,42,533,1,0,0,0,44,535,1,0,
        0,0,46,537,1,0,0,0,48,556,1,0,0,0,50,569,1,0,0,0,52,581,1,0,0,0,
        54,583,1,0,0,0,56,596,1,0,0,0,58,598,1,0,0,0,60,626,1,0,0,0,62,630,
        1,0,0,0,64,643,1,0,0,0,66,656,1,0,0,0,68,689,1,0,0,0,70,760,1,0,
        0,0,72,762,1,0,0,0,74,768,1,0,0,0,76,770,1,0,0,0,78,772,1,0,0,0,
        80,774,1,0,0,0,82,776,1,0,0,0,84,778,1,0,0,0,86,781,1,0,0,0,88,784,
        1,0,0,0,90,786,1,0,0,0,92,788,1,0,0,0,94,790,1,0,0,0,96,98,3,2,1,
        0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,
        103,1,0,0,0,101,99,1,0,0,0,102,104,3,4,2,0,103,102,1,0,0,0,104,105,
        1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,1,1,0,0,0,107,108,5,
        1,0,0,108,109,5,101,0,0,109,3,1,0,0,0,110,111,5,2,0,0,111,121,5,
        98,0,0,112,113,5,3,0,0,113,118,5,98,0,0,114,115,5,4,0,0,115,117,
        5,98,0,0,116,114,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,
        1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,121,112,1,0,0,0,121,122,
        1,0,0,0,122,123,1,0,0,0,123,125,5,5,0,0,124,126,3,6,3,0,125,124,
        1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,
        1,0,0,0,129,130,5,6,0,0,130,153,1,0,0,0,131,132,5,7,0,0,132,142,
        5,98,0,0,133,134,5,8,0,0,134,139,5,98,0,0,135,136,5,4,0,0,136,138,
        5,98,0,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,
        1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,133,1,0,0,0,142,143,
        1,0,0,0,143,144,1,0,0,0,144,148,5,5,0,0,145,147,3,6,3,0,146,145,
        1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,
        1,0,0,0,150,148,1,0,0,0,151,153,5,6,0,0,152,110,1,0,0,0,152,131,
        1,0,0,0,153,5,1,0,0,0,154,155,5,9,0,0,155,160,5,5,0,0,156,161,3,
        34,17,0,157,158,3,68,34,0,158,159,5,10,0,0,159,161,1,0,0,0,160,156,
        1,0,0,0,160,157,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,
        1,0,0,0,163,164,1,0,0,0,164,165,5,6,0,0,165,206,1,0,0,0,166,167,
        5,11,0,0,167,169,5,5,0,0,168,170,3,16,8,0,169,168,1,0,0,0,170,171,
        1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,174,
        5,6,0,0,174,206,1,0,0,0,175,179,5,12,0,0,176,178,3,46,23,0,177,176,
        1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,
        1,0,0,0,181,179,1,0,0,0,182,184,5,5,0,0,183,185,3,10,5,0,184,183,
        1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,
        1,0,0,0,188,189,5,6,0,0,189,206,1,0,0,0,190,194,5,13,0,0,191,193,
        3,46,23,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,
        1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,199,5,5,0,0,198,200,
        3,8,4,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,
        1,0,0,0,202,203,1,0,0,0,203,204,5,6,0,0,204,206,1,0,0,0,205,154,
        1,0,0,0,205,166,1,0,0,0,205,175,1,0,0,0,205,190,1,0,0,0,206,7,1,
        0,0,0,207,211,5,98,0,0,208,210,3,46,23,0,209,208,1,0,0,0,210,213,
        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,211,
        1,0,0,0,214,215,3,28,14,0,215,9,1,0,0,0,216,220,5,98,0,0,217,219,
        3,46,23,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,224,5,5,0,0,224,225,
        5,14,0,0,225,226,5,15,0,0,226,231,3,14,7,0,227,228,5,16,0,0,228,
        230,3,14,7,0,229,227,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,
        232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,246,5,10,0,0,235,
        236,5,17,0,0,236,243,5,15,0,0,237,244,5,101,0,0,238,239,5,5,0,0,
        239,240,5,101,0,0,240,241,5,4,0,0,241,242,5,101,0,0,242,244,5,6,
        0,0,243,237,1,0,0,0,243,238,1,0,0,0,244,245,1,0,0,0,245,247,5,10,
        0,0,246,235,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,18,
        0,0,249,250,5,15,0,0,250,251,3,22,11,0,251,252,5,6,0,0,252,11,1,
        0,0,0,253,258,3,14,7,0,254,255,5,16,0,0,255,257,3,14,7,0,256,254,
        1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,13,1,
        0,0,0,260,258,1,0,0,0,261,271,3,76,38,0,262,263,5,98,0,0,263,264,
        5,93,0,0,264,265,3,76,38,0,265,266,5,15,0,0,266,267,3,76,38,0,267,
        268,5,94,0,0,268,271,1,0,0,0,269,271,7,0,0,0,270,261,1,0,0,0,270,
        262,1,0,0,0,270,269,1,0,0,0,271,15,1,0,0,0,272,273,5,21,0,0,273,
        274,3,36,18,0,274,275,5,98,0,0,275,277,5,22,0,0,276,278,3,18,9,0,
        277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,283,5,23,0,0,
        280,282,3,46,23,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,
        0,283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,10,0,
        0,287,306,1,0,0,0,288,289,3,36,18,0,289,290,5,98,0,0,290,292,5,22,
        0,0,291,293,3,18,9,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,
        0,0,294,298,5,23,0,0,295,297,3,46,23,0,296,295,1,0,0,0,297,300,1,
        0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,303,1,0,0,0,300,298,1,
        0,0,0,301,304,3,28,14,0,302,304,5,10,0,0,303,301,1,0,0,0,303,302,
        1,0,0,0,304,306,1,0,0,0,305,272,1,0,0,0,305,288,1,0,0,0,306,17,1,
        0,0,0,307,312,3,20,10,0,308,309,5,4,0,0,309,311,3,20,10,0,310,308,
        1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,19,1,
        0,0,0,314,312,1,0,0,0,315,317,3,36,18,0,316,318,3,58,29,0,317,316,
        1,0,0,0,317,318,1,0,0,0,318,21,1,0,0,0,319,409,3,28,14,0,320,321,
        5,98,0,0,321,330,5,22,0,0,322,327,3,68,34,0,323,324,5,4,0,0,324,
        326,3,68,34,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,
        328,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,330,322,1,0,0,0,330,
        331,1,0,0,0,331,332,1,0,0,0,332,333,5,23,0,0,333,409,5,10,0,0,334,
        335,5,24,0,0,335,336,5,22,0,0,336,337,3,68,34,0,337,338,5,23,0,0,
        338,348,3,22,11,0,339,340,5,25,0,0,340,341,5,24,0,0,341,342,5,22,
        0,0,342,343,3,68,34,0,343,344,5,23,0,0,344,345,3,22,11,0,345,347,
        1,0,0,0,346,339,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,
        1,0,0,0,349,353,1,0,0,0,350,348,1,0,0,0,351,352,5,25,0,0,352,354,
        3,22,11,0,353,351,1,0,0,0,353,354,1,0,0,0,354,409,1,0,0,0,355,356,
        5,26,0,0,356,357,5,22,0,0,357,358,3,32,16,0,358,359,5,23,0,0,359,
        360,3,22,11,0,360,409,1,0,0,0,361,362,5,27,0,0,362,363,5,22,0,0,
        363,364,3,68,34,0,364,365,5,23,0,0,365,366,3,22,11,0,366,409,1,0,
        0,0,367,368,5,28,0,0,368,369,3,22,11,0,369,370,5,27,0,0,370,371,
        5,22,0,0,371,372,3,68,34,0,372,373,5,23,0,0,373,374,5,10,0,0,374,
        409,1,0,0,0,375,376,5,29,0,0,376,377,5,22,0,0,377,378,3,68,34,0,
        378,379,5,23,0,0,379,383,5,5,0,0,380,382,3,24,12,0,381,380,1,0,0,
        0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,389,1,0,0,
        0,385,383,1,0,0,0,386,388,3,26,13,0,387,386,1,0,0,0,388,391,1,0,
        0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,
        0,0,392,393,5,6,0,0,393,409,1,0,0,0,394,396,5,30,0,0,395,397,3,68,
        34,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,409,5,10,
        0,0,399,400,5,31,0,0,400,409,5,10,0,0,401,402,5,32,0,0,402,409,5,
        10,0,0,403,404,5,33,0,0,404,409,3,22,11,0,405,406,3,68,34,0,406,
        407,5,10,0,0,407,409,1,0,0,0,408,319,1,0,0,0,408,320,1,0,0,0,408,
        334,1,0,0,0,408,355,1,0,0,0,408,361,1,0,0,0,408,367,1,0,0,0,408,
        375,1,0,0,0,408,394,1,0,0,0,408,399,1,0,0,0,408,401,1,0,0,0,408,
        403,1,0,0,0,408,405,1,0,0,0,409,23,1,0,0,0,410,412,3,26,13,0,411,
        410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,
        416,1,0,0,0,415,417,3,22,11,0,416,415,1,0,0,0,417,418,1,0,0,0,418,
        416,1,0,0,0,418,419,1,0,0,0,419,25,1,0,0,0,420,421,5,34,0,0,421,
        422,3,68,34,0,422,423,5,15,0,0,423,427,1,0,0,0,424,425,5,35,0,0,
        425,427,5,15,0,0,426,420,1,0,0,0,426,424,1,0,0,0,427,27,1,0,0,0,
        428,432,5,5,0,0,429,431,3,30,15,0,430,429,1,0,0,0,431,434,1,0,0,
        0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,
        0,435,436,5,6,0,0,436,29,1,0,0,0,437,440,3,22,11,0,438,440,3,34,
        17,0,439,437,1,0,0,0,439,438,1,0,0,0,440,31,1,0,0,0,441,447,3,34,
        17,0,442,444,3,68,34,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,
        0,0,0,445,447,5,10,0,0,446,441,1,0,0,0,446,443,1,0,0,0,447,449,1,
        0,0,0,448,450,3,68,34,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,
        1,0,0,0,451,460,5,10,0,0,452,457,3,68,34,0,453,454,5,4,0,0,454,456,
        3,68,34,0,455,453,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,
        1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,460,452,1,0,0,0,460,461,
        1,0,0,0,461,33,1,0,0,0,462,466,3,92,46,0,463,466,3,90,45,0,464,466,
        3,46,23,0,465,462,1,0,0,0,465,463,1,0,0,0,465,464,1,0,0,0,466,469,
        1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,
        1,0,0,0,470,479,3,36,18,0,471,476,3,58,29,0,472,473,5,4,0,0,473,
        475,3,58,29,0,474,472,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,
        477,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,479,471,1,0,0,0,479,
        480,1,0,0,0,480,481,1,0,0,0,481,482,5,10,0,0,482,35,1,0,0,0,483,
        486,3,38,19,0,484,487,5,36,0,0,485,487,5,37,0,0,486,484,1,0,0,0,
        486,485,1,0,0,0,486,487,1,0,0,0,487,37,1,0,0,0,488,494,3,40,20,0,
        489,495,3,42,21,0,490,491,5,38,0,0,491,492,3,70,35,0,492,493,5,39,
        0,0,493,495,1,0,0,0,494,489,1,0,0,0,494,490,1,0,0,0,495,530,1,0,
        0,0,496,530,3,42,21,0,497,530,3,44,22,0,498,530,5,40,0,0,499,530,
        5,41,0,0,500,502,3,94,47,0,501,503,5,98,0,0,502,501,1,0,0,0,502,
        503,1,0,0,0,503,504,1,0,0,0,504,508,5,5,0,0,505,507,3,54,27,0,506,
        505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,
        511,1,0,0,0,510,508,1,0,0,0,511,512,5,6,0,0,512,530,1,0,0,0,513,
        514,3,94,47,0,514,515,5,98,0,0,515,530,1,0,0,0,516,518,5,42,0,0,
        517,519,5,98,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,
        520,521,5,5,0,0,521,523,3,50,25,0,522,524,5,4,0,0,523,522,1,0,0,
        0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,5,6,0,0,526,530,1,0,0,
        0,527,528,5,42,0,0,528,530,5,98,0,0,529,488,1,0,0,0,529,496,1,0,
        0,0,529,497,1,0,0,0,529,498,1,0,0,0,529,499,1,0,0,0,529,500,1,0,
        0,0,529,513,1,0,0,0,529,516,1,0,0,0,529,527,1,0,0,0,530,39,1,0,0,
        0,531,532,7,1,0,0,532,41,1,0,0,0,533,534,7,2,0,0,534,43,1,0,0,0,
        535,536,7,3,0,0,536,45,1,0,0,0,537,538,5,51,0,0,538,552,5,98,0,0,
        539,540,5,52,0,0,540,553,3,68,34,0,541,542,5,22,0,0,542,547,3,68,
        34,0,543,544,5,4,0,0,544,546,3,68,34,0,545,543,1,0,0,0,546,549,1,
        0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,1,
        0,0,0,550,551,5,23,0,0,551,553,1,0,0,0,552,539,1,0,0,0,552,541,1,
        0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,555,5,53,0,0,555,47,1,
        0,0,0,556,557,5,38,0,0,557,565,3,70,35,0,558,559,5,4,0,0,559,560,
        3,70,35,0,560,561,5,4,0,0,561,562,3,70,35,0,562,563,5,4,0,0,563,
        564,3,70,35,0,564,566,1,0,0,0,565,558,1,0,0,0,565,566,1,0,0,0,566,
        567,1,0,0,0,567,568,5,39,0,0,568,49,1,0,0,0,569,574,3,52,26,0,570,
        571,5,4,0,0,571,573,3,52,26,0,572,570,1,0,0,0,573,576,1,0,0,0,574,
        572,1,0,0,0,574,575,1,0,0,0,575,51,1,0,0,0,576,574,1,0,0,0,577,582,
        5,98,0,0,578,579,5,98,0,0,579,580,5,52,0,0,580,582,3,68,34,0,581,
        577,1,0,0,0,581,578,1,0,0,0,582,53,1,0,0,0,583,584,3,56,28,0,584,
        589,3,58,29,0,585,586,5,4,0,0,586,588,3,58,29,0,587,585,1,0,0,0,
        588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,
        591,589,1,0,0,0,592,593,5,10,0,0,593,55,1,0,0,0,594,597,3,36,18,
        0,595,597,3,90,45,0,596,594,1,0,0,0,596,595,1,0,0,0,597,57,1,0,0,
        0,598,605,5,98,0,0,599,600,5,93,0,0,600,601,3,68,34,0,601,602,5,
        94,0,0,602,604,1,0,0,0,603,599,1,0,0,0,604,607,1,0,0,0,605,603,1,
        0,0,0,605,606,1,0,0,0,606,611,1,0,0,0,607,605,1,0,0,0,608,610,3,
        46,23,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,
        1,0,0,0,612,616,1,0,0,0,613,611,1,0,0,0,614,615,5,52,0,0,615,617,
        3,60,30,0,616,614,1,0,0,0,616,617,1,0,0,0,617,59,1,0,0,0,618,627,
        3,68,34,0,619,620,5,5,0,0,620,622,3,62,31,0,621,623,5,4,0,0,622,
        621,1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,5,6,0,0,625,
        627,1,0,0,0,626,618,1,0,0,0,626,619,1,0,0,0,627,61,1,0,0,0,628,631,
        3,64,32,0,629,631,3,60,30,0,630,628,1,0,0,0,630,629,1,0,0,0,631,
        639,1,0,0,0,632,635,5,4,0,0,633,636,3,64,32,0,634,636,3,60,30,0,
        635,633,1,0,0,0,635,634,1,0,0,0,636,638,1,0,0,0,637,632,1,0,0,0,
        638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,63,1,0,0,0,641,
        639,1,0,0,0,642,644,3,66,33,0,643,642,1,0,0,0,644,645,1,0,0,0,645,
        643,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,5,52,0,0,648,
        649,3,60,30,0,649,65,1,0,0,0,650,651,5,93,0,0,651,652,3,68,34,0,
        652,653,5,94,0,0,653,657,1,0,0,0,654,655,5,54,0,0,655,657,5,98,0,
        0,656,650,1,0,0,0,656,654,1,0,0,0,657,67,1,0,0,0,658,659,6,34,-1,
        0,659,690,3,70,35,0,660,661,7,4,0,0,661,690,5,98,0,0,662,663,5,98,
        0,0,663,672,5,22,0,0,664,669,3,68,34,0,665,666,5,4,0,0,666,668,3,
        68,34,0,667,665,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,
        1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,672,664,1,0,0,0,672,673,
        1,0,0,0,673,674,1,0,0,0,674,690,5,23,0,0,675,676,7,5,0,0,676,690,
        3,68,34,17,677,678,7,6,0,0,678,690,3,68,34,16,679,680,7,7,0,0,680,
        690,3,68,34,15,681,684,5,22,0,0,682,685,3,36,18,0,683,685,3,40,20,
        0,684,682,1,0,0,0,684,683,1,0,0,0,685,686,1,0,0,0,686,687,5,23,0,
        0,687,688,3,68,34,14,688,690,1,0,0,0,689,658,1,0,0,0,689,660,1,0,
        0,0,689,662,1,0,0,0,689,675,1,0,0,0,689,677,1,0,0,0,689,679,1,0,
        0,0,689,681,1,0,0,0,690,746,1,0,0,0,691,692,10,13,0,0,692,693,7,
        8,0,0,693,745,3,68,34,14,694,695,10,12,0,0,695,696,7,9,0,0,696,745,
        3,68,34,13,697,698,10,11,0,0,698,699,7,10,0,0,699,745,3,68,34,12,
        700,701,10,10,0,0,701,702,7,11,0,0,702,745,3,68,34,11,703,704,10,
        9,0,0,704,705,7,12,0,0,705,745,3,68,34,10,706,707,10,8,0,0,707,708,
        5,37,0,0,708,745,3,68,34,9,709,710,10,7,0,0,710,711,5,70,0,0,711,
        745,3,68,34,8,712,713,10,6,0,0,713,714,5,71,0,0,714,745,3,68,34,
        7,715,716,10,5,0,0,716,717,5,72,0,0,717,745,3,68,34,6,718,719,10,
        4,0,0,719,720,5,73,0,0,720,745,3,68,34,5,721,722,10,3,0,0,722,723,
        5,16,0,0,723,745,3,68,34,4,724,725,10,2,0,0,725,726,5,74,0,0,726,
        727,3,68,34,0,727,728,5,15,0,0,728,729,3,68,34,2,729,745,1,0,0,0,
        730,731,10,1,0,0,731,732,7,13,0,0,732,745,3,68,34,1,733,734,10,20,
        0,0,734,735,5,93,0,0,735,738,3,68,34,0,736,737,5,15,0,0,737,739,
        3,68,34,0,738,736,1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,741,
        5,94,0,0,741,745,1,0,0,0,742,743,10,18,0,0,743,745,7,5,0,0,744,691,
        1,0,0,0,744,694,1,0,0,0,744,697,1,0,0,0,744,700,1,0,0,0,744,703,
        1,0,0,0,744,706,1,0,0,0,744,709,1,0,0,0,744,712,1,0,0,0,744,715,
        1,0,0,0,744,718,1,0,0,0,744,721,1,0,0,0,744,724,1,0,0,0,744,730,
        1,0,0,0,744,733,1,0,0,0,744,742,1,0,0,0,745,748,1,0,0,0,746,744,
        1,0,0,0,746,747,1,0,0,0,747,69,1,0,0,0,748,746,1,0,0,0,749,761,5,
        98,0,0,750,761,3,74,37,0,751,753,3,72,36,0,752,751,1,0,0,0,753,754,
        1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,761,1,0,0,0,756,757,
        5,22,0,0,757,758,3,68,34,0,758,759,5,23,0,0,759,761,1,0,0,0,760,
        749,1,0,0,0,760,750,1,0,0,0,760,752,1,0,0,0,760,756,1,0,0,0,761,
        71,1,0,0,0,762,763,7,14,0,0,763,73,1,0,0,0,764,769,3,76,38,0,765,
        769,3,78,39,0,766,769,3,82,41,0,767,769,3,80,40,0,768,764,1,0,0,
        0,768,765,1,0,0,0,768,766,1,0,0,0,768,767,1,0,0,0,769,75,1,0,0,0,
        770,771,5,97,0,0,771,77,1,0,0,0,772,773,5,96,0,0,773,79,1,0,0,0,
        774,775,5,95,0,0,775,81,1,0,0,0,776,777,5,99,0,0,777,83,1,0,0,0,
        778,779,5,93,0,0,779,780,5,93,0,0,780,85,1,0,0,0,781,782,5,94,0,
        0,782,783,5,94,0,0,783,87,1,0,0,0,784,785,7,15,0,0,785,89,1,0,0,
        0,786,787,7,16,0,0,787,91,1,0,0,0,788,789,7,17,0,0,789,93,1,0,0,
        0,790,791,7,18,0,0,791,95,1,0,0,0,88,99,105,118,121,127,139,142,
        148,152,160,162,171,179,186,194,201,205,211,220,231,243,246,258,
        270,277,283,292,298,303,305,312,317,327,330,348,353,383,389,396,
        408,413,418,426,432,439,443,446,449,457,460,465,467,476,479,486,
        494,502,508,518,523,529,547,552,565,574,581,589,596,605,611,616,
        622,626,630,635,639,645,656,669,672,684,689,738,744,746,754,760,
        768
    ]

class CoreDSL2Parser ( Parser ):

    grammarFileName = "CoreDSL2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'import'", "'InstructionSet'", "'extends'", 
                     "','", "'{'", "'}'", "'Core'", "'provides'", "'architectural_state'", 
                     "';'", "'functions'", "'instructions'", "'always'", 
                     "'encoding'", "':'", "'::'", "'assembly'", "'behavior'", 
                     "'auto'", "'AUTO'", "'extern'", "'('", "')'", "'if'", 
                     "'else'", "'for'", "'while'", "'do'", "'switch'", "'return'", 
                     "'break'", "'continue'", "'spawn'", "'case'", "'default'", 
                     "'*'", "'&'", "'<'", "'>'", "'bool'", "'void'", "'enum'", 
                     "'unsigned'", "'signed'", "'char'", "'short'", "'int'", 
                     "'long'", "'float'", "'double'", "'[['", "'='", "']]'", 
                     "'.'", "'->'", "'++'", "'--'", "'+'", "'-'", "'~'", 
                     "'!'", "'/'", "'%'", "'<<'", "'>>'", "'<='", "'>='", 
                     "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'?'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'>>='", "'>>>='", "'<<='", "'%='", "'alias'", "'const'", 
                     "'volatile'", "'static'", "'register'", "'struct'", 
                     "'union'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "LEFT_BR", "RIGHT_BR", "BOOLEAN", "FLOAT", 
                      "INTEGER", "IDENTIFIER", "CHARCONST", "ENCSTRINGCONST", 
                      "STRING", "ML_COMMENT", "SL_COMMENT", "WS" ]

    RULE_description_content = 0
    RULE_import_file = 1
    RULE_isa = 2
    RULE_section = 3
    RULE_always_block = 4
    RULE_instruction = 5
    RULE_rule_encoding = 6
    RULE_encoding_entry = 7
    RULE_function_definition = 8
    RULE_parameter_list = 9
    RULE_parameter_declaration = 10
    RULE_statement = 11
    RULE_switch_block_statement_group = 12
    RULE_switch_label = 13
    RULE_block = 14
    RULE_block_item = 15
    RULE_for_condition = 16
    RULE_declaration = 17
    RULE_type_specifier = 18
    RULE_value_type_specifier = 19
    RULE_integer_signedness = 20
    RULE_integer_shorthand = 21
    RULE_float_shorthand = 22
    RULE_attribute = 23
    RULE_bit_size_specifier = 24
    RULE_enumerator_list = 25
    RULE_enumerator = 26
    RULE_struct_declaration = 27
    RULE_struct_declaration_specifier = 28
    RULE_declarator = 29
    RULE_initializer = 30
    RULE_initializerList = 31
    RULE_designated_initializer = 32
    RULE_designator = 33
    RULE_expression = 34
    RULE_primary = 35
    RULE_string_literal = 36
    RULE_constant = 37
    RULE_integer_constant = 38
    RULE_floating_constant = 39
    RULE_bool_constant = 40
    RULE_character_constant = 41
    RULE_double_left_bracket = 42
    RULE_double_right_bracket = 43
    RULE_data_types = 44
    RULE_type_qualifier = 45
    RULE_storage_class_specifier = 46
    RULE_struct_or_union = 47

    ruleNames =  [ "description_content", "import_file", "isa", "section", 
                   "always_block", "instruction", "rule_encoding", "encoding_entry", 
                   "function_definition", "parameter_list", "parameter_declaration", 
                   "statement", "switch_block_statement_group", "switch_label", 
                   "block", "block_item", "for_condition", "declaration", 
                   "type_specifier", "value_type_specifier", "integer_signedness", 
                   "integer_shorthand", "float_shorthand", "attribute", 
                   "bit_size_specifier", "enumerator_list", "enumerator", 
                   "struct_declaration", "struct_declaration_specifier", 
                   "declarator", "initializer", "initializerList", "designated_initializer", 
                   "designator", "expression", "primary", "string_literal", 
                   "constant", "integer_constant", "floating_constant", 
                   "bool_constant", "character_constant", "double_left_bracket", 
                   "double_right_bracket", "data_types", "type_qualifier", 
                   "storage_class_specifier", "struct_or_union" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    LEFT_BR=93
    RIGHT_BR=94
    BOOLEAN=95
    FLOAT=96
    INTEGER=97
    IDENTIFIER=98
    CHARCONST=99
    ENCSTRINGCONST=100
    STRING=101
    ML_COMMENT=102
    SL_COMMENT=103
    WS=104

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Description_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._import_file = None # Import_fileContext
            self.imports = list() # of Import_fileContexts
            self._isa = None # IsaContext
            self.definitions = list() # of IsaContexts

        def import_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Import_fileContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Import_fileContext,i)


        def isa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.IsaContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.IsaContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_description_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescription_content" ):
                listener.enterDescription_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescription_content" ):
                listener.exitDescription_content(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescription_content" ):
                return visitor.visitDescription_content(self)
            else:
                return visitor.visitChildren(self)




    def description_content(self):

        localctx = CoreDSL2Parser.Description_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_description_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 96
                localctx._import_file = self.import_file()
                localctx.imports.append(localctx._import_file)
                self.state = 101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 103 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 102
                localctx._isa = self.isa()
                localctx.definitions.append(localctx._isa)
                self.state = 105 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2 or _la==7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.uri = None # Token

        def STRING(self):
            return self.getToken(CoreDSL2Parser.STRING, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_import_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_file" ):
                listener.enterImport_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_file" ):
                listener.exitImport_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_file" ):
                return visitor.visitImport_file(self)
            else:
                return visitor.visitChildren(self)




    def import_file(self):

        localctx = CoreDSL2Parser.Import_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_import_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(CoreDSL2Parser.T__0)
            self.state = 108
            localctx.uri = self.match(CoreDSL2Parser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_isa

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Instruction_setContext(IsaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.IsaContext
            super().__init__(parser)
            self.name = None # Token
            self._IDENTIFIER = None # Token
            self.extension = list() # of Tokens
            self._section = None # SectionContext
            self.sections = list() # of SectionContexts
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.IDENTIFIER)
            else:
                return self.getToken(CoreDSL2Parser.IDENTIFIER, i)
        def section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.SectionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.SectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction_set" ):
                listener.enterInstruction_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction_set" ):
                listener.exitInstruction_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction_set" ):
                return visitor.visitInstruction_set(self)
            else:
                return visitor.visitChildren(self)


    class Core_defContext(IsaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.IsaContext
            super().__init__(parser)
            self.name = None # Token
            self._IDENTIFIER = None # Token
            self.contributing_types = list() # of Tokens
            self._section = None # SectionContext
            self.sections = list() # of SectionContexts
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.IDENTIFIER)
            else:
                return self.getToken(CoreDSL2Parser.IDENTIFIER, i)
        def section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.SectionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.SectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCore_def" ):
                listener.enterCore_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCore_def" ):
                listener.exitCore_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCore_def" ):
                return visitor.visitCore_def(self)
            else:
                return visitor.visitChildren(self)



    def isa(self):

        localctx = CoreDSL2Parser.IsaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_isa)
        self._la = 0 # Token type
        try:
            self.state = 152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                localctx = CoreDSL2Parser.Instruction_setContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 110
                self.match(CoreDSL2Parser.T__1)
                self.state = 111
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 112
                    self.match(CoreDSL2Parser.T__2)
                    self.state = 113
                    localctx._IDENTIFIER = self.match(CoreDSL2Parser.IDENTIFIER)
                    localctx.extension.append(localctx._IDENTIFIER)
                    self.state = 118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 114
                        self.match(CoreDSL2Parser.T__3)
                        self.state = 115
                        localctx._IDENTIFIER = self.match(CoreDSL2Parser.IDENTIFIER)
                        localctx.extension.append(localctx._IDENTIFIER)
                        self.state = 120
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 123
                self.match(CoreDSL2Parser.T__4)
                self.state = 125 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 124
                    localctx._section = self.section()
                    localctx.sections.append(localctx._section)
                    self.state = 127 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 14848) != 0)):
                        break

                self.state = 129
                self.match(CoreDSL2Parser.T__5)
                pass
            elif token in [7]:
                localctx = CoreDSL2Parser.Core_defContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.match(CoreDSL2Parser.T__6)
                self.state = 132
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 133
                    self.match(CoreDSL2Parser.T__7)
                    self.state = 134
                    localctx._IDENTIFIER = self.match(CoreDSL2Parser.IDENTIFIER)
                    localctx.contributing_types.append(localctx._IDENTIFIER)
                    self.state = 139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 135
                        self.match(CoreDSL2Parser.T__3)
                        self.state = 136
                        localctx._IDENTIFIER = self.match(CoreDSL2Parser.IDENTIFIER)
                        localctx.contributing_types.append(localctx._IDENTIFIER)
                        self.state = 141
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 144
                self.match(CoreDSL2Parser.T__4)
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 14848) != 0):
                    self.state = 145
                    localctx._section = self.section()
                    localctx.sections.append(localctx._section)
                    self.state = 150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 151
                self.match(CoreDSL2Parser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_section

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Section_instructionsContext(SectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.SectionContext
            super().__init__(parser)
            self.type_ = None # Token
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self._instruction = None # InstructionContext
            self.instructions = list() # of InstructionContexts
            self.copyFrom(ctx)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.InstructionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.InstructionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_instructions" ):
                listener.enterSection_instructions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_instructions" ):
                listener.exitSection_instructions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_instructions" ):
                return visitor.visitSection_instructions(self)
            else:
                return visitor.visitChildren(self)


    class Section_alwaysContext(SectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.SectionContext
            super().__init__(parser)
            self.type_ = None # Token
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self._always_block = None # Always_blockContext
            self.always_blocks = list() # of Always_blockContexts
            self.copyFrom(ctx)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)

        def always_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Always_blockContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Always_blockContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_always" ):
                listener.enterSection_always(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_always" ):
                listener.exitSection_always(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_always" ):
                return visitor.visitSection_always(self)
            else:
                return visitor.visitChildren(self)


    class Section_functionsContext(SectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.SectionContext
            super().__init__(parser)
            self.type_ = None # Token
            self._function_definition = None # Function_definitionContext
            self.functions = list() # of Function_definitionContexts
            self.copyFrom(ctx)

        def function_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Function_definitionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Function_definitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_functions" ):
                listener.enterSection_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_functions" ):
                listener.exitSection_functions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_functions" ):
                return visitor.visitSection_functions(self)
            else:
                return visitor.visitChildren(self)


    class Section_arch_stateContext(SectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.SectionContext
            super().__init__(parser)
            self.type_ = None # Token
            self._declaration = None # DeclarationContext
            self.declarations = list() # of DeclarationContexts
            self._expression = None # ExpressionContext
            self.expressions = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.DeclarationContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_arch_state" ):
                listener.enterSection_arch_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_arch_state" ):
                listener.exitSection_arch_state(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_arch_state" ):
                return visitor.visitSection_arch_state(self)
            else:
                return visitor.visitChildren(self)



    def section(self):

        localctx = CoreDSL2Parser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_section)
        self._la = 0 # Token type
        try:
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                localctx = CoreDSL2Parser.Section_arch_stateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 154
                localctx.type_ = self.match(CoreDSL2Parser.T__8)
                self.state = 155
                self.match(CoreDSL2Parser.T__4)
                self.state = 160 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 160
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 87, 88, 89, 90, 91, 92]:
                        self.state = 156
                        localctx._declaration = self.declaration()
                        localctx.declarations.append(localctx._declaration)
                        pass
                    elif token in [22, 36, 37, 54, 55, 56, 57, 58, 59, 60, 61, 95, 96, 97, 98, 99, 100, 101]:
                        self.state = 157
                        localctx._expression = self.expression(0)
                        localctx.expressions.append(localctx._expression)
                        self.state = 158
                        self.match(CoreDSL2Parser.T__9)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 162 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4598174326198370304) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 32575) != 0)):
                        break

                self.state = 164
                self.match(CoreDSL2Parser.T__5)
                pass
            elif token in [11]:
                localctx = CoreDSL2Parser.Section_functionsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 166
                localctx.type_ = self.match(CoreDSL2Parser.T__10)
                self.state = 167
                self.match(CoreDSL2Parser.T__4)
                self.state = 169 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 168
                    localctx._function_definition = self.function_definition()
                    localctx.functions.append(localctx._function_definition)
                    self.state = 171 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2250700304154624) != 0) or _la==91 or _la==92):
                        break

                self.state = 173
                self.match(CoreDSL2Parser.T__5)
                pass
            elif token in [12]:
                localctx = CoreDSL2Parser.Section_instructionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 175
                localctx.type_ = self.match(CoreDSL2Parser.T__11)
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 176
                    localctx._attribute = self.attribute()
                    localctx.attributes.append(localctx._attribute)
                    self.state = 181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 182
                self.match(CoreDSL2Parser.T__4)
                self.state = 184 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 183
                    localctx._instruction = self.instruction()
                    localctx.instructions.append(localctx._instruction)
                    self.state = 186 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==98):
                        break

                self.state = 188
                self.match(CoreDSL2Parser.T__5)
                pass
            elif token in [13]:
                localctx = CoreDSL2Parser.Section_alwaysContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 190
                localctx.type_ = self.match(CoreDSL2Parser.T__12)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 191
                    localctx._attribute = self.attribute()
                    localctx.attributes.append(localctx._attribute)
                    self.state = 196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 197
                self.match(CoreDSL2Parser.T__4)
                self.state = 199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 198
                    localctx._always_block = self.always_block()
                    localctx.always_blocks.append(localctx._always_block)
                    self.state = 201 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==98):
                        break

                self.state = 203
                self.match(CoreDSL2Parser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Always_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self.behavior = None # BlockContext

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def block(self):
            return self.getTypedRuleContext(CoreDSL2Parser.BlockContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_always_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlways_block" ):
                listener.enterAlways_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlways_block" ):
                listener.exitAlways_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlways_block" ):
                return visitor.visitAlways_block(self)
            else:
                return visitor.visitChildren(self)




    def always_block(self):

        localctx = CoreDSL2Parser.Always_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_always_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 208
                localctx._attribute = self.attribute()
                localctx.attributes.append(localctx._attribute)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            localctx.behavior = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self._encoding_entry = None # Encoding_entryContext
            self.encoding = list() # of Encoding_entryContexts
            self.assembly = None # Token
            self.mnemonic = None # Token
            self.behavior = None # StatementContext

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def encoding_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Encoding_entryContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Encoding_entryContext,i)


        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.STRING)
            else:
                return self.getToken(CoreDSL2Parser.STRING, i)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = CoreDSL2Parser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 217
                localctx._attribute = self.attribute()
                localctx.attributes.append(localctx._attribute)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(CoreDSL2Parser.T__4)
            self.state = 224
            self.match(CoreDSL2Parser.T__13)
            self.state = 225
            self.match(CoreDSL2Parser.T__14)
            self.state = 226
            localctx._encoding_entry = self.encoding_entry()
            localctx.encoding.append(localctx._encoding_entry)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 227
                self.match(CoreDSL2Parser.T__15)
                self.state = 228
                localctx._encoding_entry = self.encoding_entry()
                localctx.encoding.append(localctx._encoding_entry)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(CoreDSL2Parser.T__9)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 235
                self.match(CoreDSL2Parser.T__16)
                self.state = 236
                self.match(CoreDSL2Parser.T__14)
                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 237
                    localctx.assembly = self.match(CoreDSL2Parser.STRING)
                    pass
                elif token in [5]:
                    self.state = 238
                    self.match(CoreDSL2Parser.T__4)
                    self.state = 239
                    localctx.mnemonic = self.match(CoreDSL2Parser.STRING)
                    self.state = 240
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 241
                    localctx.assembly = self.match(CoreDSL2Parser.STRING)
                    self.state = 242
                    self.match(CoreDSL2Parser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 245
                self.match(CoreDSL2Parser.T__9)


            self.state = 248
            self.match(CoreDSL2Parser.T__17)
            self.state = 249
            self.match(CoreDSL2Parser.T__14)
            self.state = 250
            localctx.behavior = self.statement()
            self.state = 251
            self.match(CoreDSL2Parser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._encoding_entry = None # Encoding_entryContext
            self.fields = list() # of Encoding_entryContexts

        def encoding_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Encoding_entryContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Encoding_entryContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_rule_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_encoding" ):
                listener.enterRule_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_encoding" ):
                listener.exitRule_encoding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_encoding" ):
                return visitor.visitRule_encoding(self)
            else:
                return visitor.visitChildren(self)




    def rule_encoding(self):

        localctx = CoreDSL2Parser.Rule_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_rule_encoding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            localctx._encoding_entry = self.encoding_entry()
            localctx.fields.append(localctx._encoding_entry)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 254
                self.match(CoreDSL2Parser.T__15)
                self.state = 255
                localctx._encoding_entry = self.encoding_entry()
                localctx.fields.append(localctx._encoding_entry)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_encoding_entry

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Bit_fieldContext(Encoding_entryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Encoding_entryContext
            super().__init__(parser)
            self.name = None # Token
            self.left = None # Integer_constantContext
            self.right = None # Integer_constantContext
            self.copyFrom(ctx)

        def LEFT_BR(self):
            return self.getToken(CoreDSL2Parser.LEFT_BR, 0)
        def RIGHT_BR(self):
            return self.getToken(CoreDSL2Parser.RIGHT_BR, 0)
        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)
        def integer_constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Integer_constantContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Integer_constantContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_field" ):
                listener.enterBit_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_field" ):
                listener.exitBit_field(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_field" ):
                return visitor.visitBit_field(self)
            else:
                return visitor.visitChildren(self)


    class Bit_valueContext(Encoding_entryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Encoding_entryContext
            super().__init__(parser)
            self.value = None # Integer_constantContext
            self.copyFrom(ctx)

        def integer_constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Integer_constantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_value" ):
                listener.enterBit_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_value" ):
                listener.exitBit_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_value" ):
                return visitor.visitBit_value(self)
            else:
                return visitor.visitChildren(self)


    class Auto_fieldContext(Encoding_entryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Encoding_entryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_field" ):
                listener.enterAuto_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_field" ):
                listener.exitAuto_field(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuto_field" ):
                return visitor.visitAuto_field(self)
            else:
                return visitor.visitChildren(self)



    def encoding_entry(self):

        localctx = CoreDSL2Parser.Encoding_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_encoding_entry)
        self._la = 0 # Token type
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                localctx = CoreDSL2Parser.Bit_valueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                localctx.value = self.integer_constant()
                pass
            elif token in [98]:
                localctx = CoreDSL2Parser.Bit_fieldContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 263
                self.match(CoreDSL2Parser.LEFT_BR)
                self.state = 264
                localctx.left = self.integer_constant()
                self.state = 265
                self.match(CoreDSL2Parser.T__14)
                self.state = 266
                localctx.right = self.integer_constant()
                self.state = 267
                self.match(CoreDSL2Parser.RIGHT_BR)
                pass
            elif token in [19, 20]:
                localctx = CoreDSL2Parser.Auto_fieldContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.extern = None # Token
            self.type_ = None # Type_specifierContext
            self.name = None # Token
            self.params = None # Parameter_listContext
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self.behavior = None # BlockContext

        def type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_specifierContext,0)


        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Parameter_listContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)


        def block(self):
            return self.getTypedRuleContext(CoreDSL2Parser.BlockContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_function_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition" ):
                listener.enterFunction_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition" ):
                listener.exitFunction_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_definition" ):
                return visitor.visitFunction_definition(self)
            else:
                return visitor.visitChildren(self)




    def function_definition(self):

        localctx = CoreDSL2Parser.Function_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_definition)
        self._la = 0 # Token type
        try:
            self.state = 305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                localctx.extern = self.match(CoreDSL2Parser.T__20)
                self.state = 273
                localctx.type_ = self.type_specifier()
                self.state = 274
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 275
                self.match(CoreDSL2Parser.T__21)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 6755399441057791) != 0):
                    self.state = 276
                    localctx.params = self.parameter_list()


                self.state = 279
                self.match(CoreDSL2Parser.T__22)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 280
                    localctx._attribute = self.attribute()
                    localctx.attributes.append(localctx._attribute)
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 286
                self.match(CoreDSL2Parser.T__9)
                pass
            elif token in [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                localctx.type_ = self.type_specifier()
                self.state = 289
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 290
                self.match(CoreDSL2Parser.T__21)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 6755399441057791) != 0):
                    self.state = 291
                    localctx.params = self.parameter_list()


                self.state = 294
                self.match(CoreDSL2Parser.T__22)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 295
                    localctx._attribute = self.attribute()
                    localctx.attributes.append(localctx._attribute)
                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 301
                    localctx.behavior = self.block()
                    pass
                elif token in [10]:
                    self.state = 302
                    self.match(CoreDSL2Parser.T__9)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._parameter_declaration = None # Parameter_declarationContext
            self.params = list() # of Parameter_declarationContexts

        def parameter_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Parameter_declarationContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Parameter_declarationContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_list" ):
                listener.enterParameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_list" ):
                listener.exitParameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_list" ):
                return visitor.visitParameter_list(self)
            else:
                return visitor.visitChildren(self)




    def parameter_list(self):

        localctx = CoreDSL2Parser.Parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            localctx._parameter_declaration = self.parameter_declaration()
            localctx.params.append(localctx._parameter_declaration)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 308
                self.match(CoreDSL2Parser.T__3)
                self.state = 309
                localctx._parameter_declaration = self.parameter_declaration()
                localctx.params.append(localctx._parameter_declaration)
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Type_specifierContext
            self.decl = None # DeclaratorContext

        def type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_specifierContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CoreDSL2Parser.DeclaratorContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_parameter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_declaration" ):
                listener.enterParameter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_declaration" ):
                listener.exitParameter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_declaration" ):
                return visitor.visitParameter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_declaration(self):

        localctx = CoreDSL2Parser.Parameter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_parameter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            localctx.type_ = self.type_specifier()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 316
                localctx.decl = self.declarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class For_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.cond = None # For_conditionContext
            self.stmt = None # StatementContext
            self.copyFrom(ctx)

        def for_condition(self):
            return self.getTypedRuleContext(CoreDSL2Parser.For_conditionContext,0)

        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Spawn_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.stmt = None # StatementContext
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_statement" ):
                listener.enterSpawn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_statement" ):
                listener.exitSpawn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpawn_statement" ):
                return visitor.visitSpawn_statement(self)
            else:
                return visitor.visitChildren(self)


    class Continue_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)


    class Expression_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_statement" ):
                listener.enterExpression_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_statement" ):
                listener.exitExpression_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_statement" ):
                return visitor.visitExpression_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self._expression = None # ExpressionContext
            self.cond = list() # of ExpressionContexts
            self._statement = None # StatementContext
            self.stmt = list() # of StatementContexts
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Procedure_callContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.ref = None # Token
            self._expression = None # ExpressionContext
            self.args = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_call" ):
                listener.enterProcedure_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_call" ):
                listener.exitProcedure_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_call" ):
                return visitor.visitProcedure_call(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.cond = None # ExpressionContext
            self.stmt = None # StatementContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)

        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)


    class Switch_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.cond = None # ExpressionContext
            self._switch_block_statement_group = None # Switch_block_statement_groupContext
            self.items = list() # of Switch_block_statement_groupContexts
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)

        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Switch_labelContext,i)

        def switch_block_statement_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Switch_block_statement_groupContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Switch_block_statement_groupContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_statement" ):
                return visitor.visitSwitch_statement(self)
            else:
                return visitor.visitChildren(self)


    class Block_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(CoreDSL2Parser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)


    class Do_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.stmt = None # StatementContext
            self.cond = None # ExpressionContext
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement" ):
                return visitor.visitDo_statement(self)
            else:
                return visitor.visitChildren(self)


    class Break_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)


    class Return_statementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.StatementContext
            super().__init__(parser)
            self.type_ = None # Token
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = CoreDSL2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                localctx = CoreDSL2Parser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.block()
                pass

            elif la_ == 2:
                localctx = CoreDSL2Parser.Procedure_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                localctx.ref = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 321
                self.match(CoreDSL2Parser.T__21)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                    self.state = 322
                    localctx._expression = self.expression(0)
                    localctx.args.append(localctx._expression)
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 323
                        self.match(CoreDSL2Parser.T__3)
                        self.state = 324
                        localctx._expression = self.expression(0)
                        localctx.args.append(localctx._expression)
                        self.state = 329
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 332
                self.match(CoreDSL2Parser.T__22)
                self.state = 333
                self.match(CoreDSL2Parser.T__9)
                pass

            elif la_ == 3:
                localctx = CoreDSL2Parser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                localctx.type_ = self.match(CoreDSL2Parser.T__23)
                self.state = 335
                self.match(CoreDSL2Parser.T__21)
                self.state = 336
                localctx._expression = self.expression(0)
                localctx.cond.append(localctx._expression)
                self.state = 337
                self.match(CoreDSL2Parser.T__22)
                self.state = 338
                localctx._statement = self.statement()
                localctx.stmt.append(localctx._statement)
                self.state = 348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 339
                        self.match(CoreDSL2Parser.T__24)
                        self.state = 340
                        self.match(CoreDSL2Parser.T__23)
                        self.state = 341
                        self.match(CoreDSL2Parser.T__21)
                        self.state = 342
                        localctx._expression = self.expression(0)
                        localctx.cond.append(localctx._expression)
                        self.state = 343
                        self.match(CoreDSL2Parser.T__22)
                        self.state = 344
                        localctx._statement = self.statement()
                        localctx.stmt.append(localctx._statement) 
                    self.state = 350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 351
                    self.match(CoreDSL2Parser.T__24)
                    self.state = 352
                    localctx._statement = self.statement()
                    localctx.stmt.append(localctx._statement)


                pass

            elif la_ == 4:
                localctx = CoreDSL2Parser.For_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                localctx.type_ = self.match(CoreDSL2Parser.T__25)
                self.state = 356
                self.match(CoreDSL2Parser.T__21)
                self.state = 357
                localctx.cond = self.for_condition()
                self.state = 358
                self.match(CoreDSL2Parser.T__22)
                self.state = 359
                localctx.stmt = self.statement()
                pass

            elif la_ == 5:
                localctx = CoreDSL2Parser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                localctx.type_ = self.match(CoreDSL2Parser.T__26)
                self.state = 362
                self.match(CoreDSL2Parser.T__21)
                self.state = 363
                localctx.cond = self.expression(0)
                self.state = 364
                self.match(CoreDSL2Parser.T__22)
                self.state = 365
                localctx.stmt = self.statement()
                pass

            elif la_ == 6:
                localctx = CoreDSL2Parser.Do_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 367
                localctx.type_ = self.match(CoreDSL2Parser.T__27)
                self.state = 368
                localctx.stmt = self.statement()
                self.state = 369
                self.match(CoreDSL2Parser.T__26)
                self.state = 370
                self.match(CoreDSL2Parser.T__21)
                self.state = 371
                localctx.cond = self.expression(0)
                self.state = 372
                self.match(CoreDSL2Parser.T__22)
                self.state = 373
                self.match(CoreDSL2Parser.T__9)
                pass

            elif la_ == 7:
                localctx = CoreDSL2Parser.Switch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 375
                localctx.type_ = self.match(CoreDSL2Parser.T__28)
                self.state = 376
                self.match(CoreDSL2Parser.T__21)
                self.state = 377
                localctx.cond = self.expression(0)
                self.state = 378
                self.match(CoreDSL2Parser.T__22)
                self.state = 379
                self.match(CoreDSL2Parser.T__4)
                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 380
                        localctx._switch_block_statement_group = self.switch_block_statement_group()
                        localctx.items.append(localctx._switch_block_statement_group) 
                    self.state = 385
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34 or _la==35:
                    self.state = 386
                    self.switch_label()
                    self.state = 391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 392
                self.match(CoreDSL2Parser.T__5)
                pass

            elif la_ == 8:
                localctx = CoreDSL2Parser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 394
                localctx.type_ = self.match(CoreDSL2Parser.T__29)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                    self.state = 395
                    localctx.expr = self.expression(0)


                self.state = 398
                self.match(CoreDSL2Parser.T__9)
                pass

            elif la_ == 9:
                localctx = CoreDSL2Parser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 399
                localctx.type_ = self.match(CoreDSL2Parser.T__30)
                self.state = 400
                self.match(CoreDSL2Parser.T__9)
                pass

            elif la_ == 10:
                localctx = CoreDSL2Parser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 401
                localctx.type_ = self.match(CoreDSL2Parser.T__31)
                self.state = 402
                self.match(CoreDSL2Parser.T__9)
                pass

            elif la_ == 11:
                localctx = CoreDSL2Parser.Spawn_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 403
                localctx.type_ = self.match(CoreDSL2Parser.T__32)
                self.state = 404
                localctx.stmt = self.statement()
                pass

            elif la_ == 12:
                localctx = CoreDSL2Parser.Expression_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 405
                localctx.expr = self.expression(0)
                self.state = 406
                self.match(CoreDSL2Parser.T__9)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_block_statement_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._switch_label = None # Switch_labelContext
            self.labels = list() # of Switch_labelContexts
            self._statement = None # StatementContext
            self.statements = list() # of StatementContexts

        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Switch_labelContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_switch_block_statement_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_block_statement_group" ):
                listener.enterSwitch_block_statement_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_block_statement_group" ):
                listener.exitSwitch_block_statement_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_block_statement_group" ):
                return visitor.visitSwitch_block_statement_group(self)
            else:
                return visitor.visitChildren(self)




    def switch_block_statement_group(self):

        localctx = CoreDSL2Parser.Switch_block_statement_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_switch_block_statement_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 410
                localctx._switch_label = self.switch_label()
                localctx.labels.append(localctx._switch_label)
                self.state = 413 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==34 or _la==35):
                    break

            self.state = 416 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 415
                localctx._statement = self.statement()
                localctx.statements.append(localctx._statement)
                self.state = 418 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671843210068000) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const_expr = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_label" ):
                return visitor.visitSwitch_label(self)
            else:
                return visitor.visitChildren(self)




    def switch_label(self):

        localctx = CoreDSL2Parser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_switch_label)
        try:
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.match(CoreDSL2Parser.T__33)
                self.state = 421
                localctx.const_expr = self.expression(0)
                self.state = 422
                self.match(CoreDSL2Parser.T__14)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.match(CoreDSL2Parser.T__34)
                self.state = 425
                self.match(CoreDSL2Parser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._block_item = None # Block_itemContext
            self.items = list() # of Block_itemContexts

        def block_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Block_itemContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Block_itemContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = CoreDSL2Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(CoreDSL2Parser.T__4)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4598174343327907872) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 32575) != 0):
                self.state = 429
                localctx._block_item = self.block_item()
                localctx.items.append(localctx._block_item)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.match(CoreDSL2Parser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CoreDSL2Parser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CoreDSL2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_block_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_item" ):
                listener.enterBlock_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_item" ):
                listener.exitBlock_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_item" ):
                return visitor.visitBlock_item(self)
            else:
                return visitor.visitChildren(self)




    def block_item(self):

        localctx = CoreDSL2Parser.Block_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_block_item)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 54, 55, 56, 57, 58, 59, 60, 61, 95, 96, 97, 98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.statement()
                pass
            elif token in [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 87, 88, 89, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start_decl = None # DeclarationContext
            self.start_expr = None # ExpressionContext
            self.end_expr = None # ExpressionContext
            self._expression = None # ExpressionContext
            self.loop_exprs = list() # of ExpressionContexts

        def declaration(self):
            return self.getTypedRuleContext(CoreDSL2Parser.DeclarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_for_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_condition" ):
                listener.enterFor_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_condition" ):
                listener.exitFor_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_condition" ):
                return visitor.visitFor_condition(self)
            else:
                return visitor.visitChildren(self)




    def for_condition(self):

        localctx = CoreDSL2Parser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_for_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 87, 88, 89, 90, 91, 92]:
                self.state = 441
                localctx.start_decl = self.declaration()
                pass
            elif token in [10, 22, 36, 37, 54, 55, 56, 57, 58, 59, 60, 61, 95, 96, 97, 98, 99, 100, 101]:
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                    self.state = 442
                    localctx.start_expr = self.expression(0)


                self.state = 445
                self.match(CoreDSL2Parser.T__9)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                self.state = 448
                localctx.end_expr = self.expression(0)


            self.state = 451
            self.match(CoreDSL2Parser.T__9)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                self.state = 452
                localctx._expression = self.expression(0)
                localctx.loop_exprs.append(localctx._expression)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 453
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 454
                    localctx._expression = self.expression(0)
                    localctx.loop_exprs.append(localctx._expression)
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._storage_class_specifier = None # Storage_class_specifierContext
            self.storage = list() # of Storage_class_specifierContexts
            self._type_qualifier = None # Type_qualifierContext
            self.qualifiers = list() # of Type_qualifierContexts
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self.type_ = None # Type_specifierContext
            self._declarator = None # DeclaratorContext
            self.declarations = list() # of DeclaratorContexts

        def type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_specifierContext,0)


        def storage_class_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Storage_class_specifierContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Storage_class_specifierContext,i)


        def type_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Type_qualifierContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Type_qualifierContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)


        def declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.DeclaratorContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CoreDSL2Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21 or _la==51 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 15) != 0):
                self.state = 465
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21, 89, 90]:
                    self.state = 462
                    localctx._storage_class_specifier = self.storage_class_specifier()
                    localctx.storage.append(localctx._storage_class_specifier)
                    pass
                elif token in [87, 88]:
                    self.state = 463
                    localctx._type_qualifier = self.type_qualifier()
                    localctx.qualifiers.append(localctx._type_qualifier)
                    pass
                elif token in [51]:
                    self.state = 464
                    localctx._attribute = self.attribute()
                    localctx.attributes.append(localctx._attribute)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            localctx.type_ = self.type_specifier()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 471
                localctx._declarator = self.declarator()
                localctx.declarations.append(localctx._declarator)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 472
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 473
                    localctx._declarator = self.declarator()
                    localctx.declarations.append(localctx._declarator)
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 481
            self.match(CoreDSL2Parser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Value_type_specifierContext
            self.ptr = None # Token

        def value_type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Value_type_specifierContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_specifier" ):
                return visitor.visitType_specifier(self)
            else:
                return visitor.visitChildren(self)




    def type_specifier(self):

        localctx = CoreDSL2Parser.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            localctx.type_ = self.value_type_specifier()
            self.state = 486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.state = 484
                localctx.ptr = self.match(CoreDSL2Parser.T__35)
                pass
            elif token in [37]:
                self.state = 485
                localctx.ptr = self.match(CoreDSL2Parser.T__36)
                pass
            elif token in [4, 10, 23, 98]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_type_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_value_type_specifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Composite_declarationContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Struct_or_unionContext
            self.name = None # Token
            self._struct_declaration = None # Struct_declarationContext
            self.declarations = list() # of Struct_declarationContexts
            self.copyFrom(ctx)

        def struct_or_union(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Struct_or_unionContext,0)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)
        def struct_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Struct_declarationContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Struct_declarationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposite_declaration" ):
                listener.enterComposite_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposite_declaration" ):
                listener.exitComposite_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_declaration" ):
                return visitor.visitComposite_declaration(self)
            else:
                return visitor.visitChildren(self)


    class Composite_referenceContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Struct_or_unionContext
            self.name = None # Token
            self.copyFrom(ctx)

        def struct_or_union(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Struct_or_unionContext,0)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposite_reference" ):
                listener.enterComposite_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposite_reference" ):
                listener.exitComposite_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposite_reference" ):
                return visitor.visitComposite_reference(self)
            else:
                return visitor.visitChildren(self)


    class Enum_declarationContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Token
            self.name = None # Token
            self.copyFrom(ctx)

        def enumerator_list(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Enumerator_listContext,0)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declaration" ):
                return visitor.visitEnum_declaration(self)
            else:
                return visitor.visitChildren(self)


    class Void_typeContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Token
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoid_type" ):
                listener.enterVoid_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoid_type" ):
                listener.exitVoid_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoid_type" ):
                return visitor.visitVoid_type(self)
            else:
                return visitor.visitChildren(self)


    class Enum_referenceContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Token
            self.name = None # Token
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_reference" ):
                listener.enterEnum_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_reference" ):
                listener.exitEnum_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_reference" ):
                return visitor.visitEnum_reference(self)
            else:
                return visitor.visitChildren(self)


    class Float_typeContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.shorthand = None # Float_shorthandContext
            self.copyFrom(ctx)

        def float_shorthand(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Float_shorthandContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_type" ):
                listener.enterFloat_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_type" ):
                listener.exitFloat_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_type" ):
                return visitor.visitFloat_type(self)
            else:
                return visitor.visitChildren(self)


    class Bool_typeContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.type_ = None # Token
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_type" ):
                listener.enterBool_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_type" ):
                listener.exitBool_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_type" ):
                return visitor.visitBool_type(self)
            else:
                return visitor.visitChildren(self)


    class Integer_typeContext(Value_type_specifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.Value_type_specifierContext
            super().__init__(parser)
            self.signed = None # Integer_signednessContext
            self.shorthand = None # Integer_shorthandContext
            self.size = None # PrimaryContext
            self.copyFrom(ctx)

        def integer_signedness(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Integer_signednessContext,0)

        def integer_shorthand(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Integer_shorthandContext,0)

        def primary(self):
            return self.getTypedRuleContext(CoreDSL2Parser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_type" ):
                return visitor.visitInteger_type(self)
            else:
                return visitor.visitChildren(self)



    def value_type_specifier(self):

        localctx = CoreDSL2Parser.Value_type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_value_type_specifier)
        self._la = 0 # Token type
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                localctx = CoreDSL2Parser.Integer_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                localctx.signed = self.integer_signedness()
                self.state = 494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45, 46, 47, 48]:
                    self.state = 489
                    localctx.shorthand = self.integer_shorthand()
                    pass
                elif token in [38]:
                    self.state = 490
                    self.match(CoreDSL2Parser.T__37)
                    self.state = 491
                    localctx.size = self.primary()
                    self.state = 492
                    self.match(CoreDSL2Parser.T__38)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = CoreDSL2Parser.Integer_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                localctx.shorthand = self.integer_shorthand()
                pass

            elif la_ == 3:
                localctx = CoreDSL2Parser.Float_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                localctx.shorthand = self.float_shorthand()
                pass

            elif la_ == 4:
                localctx = CoreDSL2Parser.Bool_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                localctx.type_ = self.match(CoreDSL2Parser.T__39)
                pass

            elif la_ == 5:
                localctx = CoreDSL2Parser.Void_typeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                localctx.type_ = self.match(CoreDSL2Parser.T__40)
                pass

            elif la_ == 6:
                localctx = CoreDSL2Parser.Composite_declarationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                localctx.type_ = self.struct_or_union()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 501
                    localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)


                self.state = 504
                self.match(CoreDSL2Parser.T__4)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 7177611906123775) != 0):
                    self.state = 505
                    localctx._struct_declaration = self.struct_declaration()
                    localctx.declarations.append(localctx._struct_declaration)
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 511
                self.match(CoreDSL2Parser.T__5)
                pass

            elif la_ == 7:
                localctx = CoreDSL2Parser.Composite_referenceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 513
                localctx.type_ = self.struct_or_union()
                self.state = 514
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                pass

            elif la_ == 8:
                localctx = CoreDSL2Parser.Enum_declarationContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 516
                localctx.type_ = self.match(CoreDSL2Parser.T__41)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 517
                    localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)


                self.state = 520
                self.match(CoreDSL2Parser.T__4)
                self.state = 521
                self.enumerator_list()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 522
                    self.match(CoreDSL2Parser.T__3)


                self.state = 525
                self.match(CoreDSL2Parser.T__5)
                pass

            elif la_ == 9:
                localctx = CoreDSL2Parser.Enum_referenceContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 527
                localctx.type_ = self.match(CoreDSL2Parser.T__41)
                self.state = 528
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_signednessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_integer_signedness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_signedness" ):
                listener.enterInteger_signedness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_signedness" ):
                listener.exitInteger_signedness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_signedness" ):
                return visitor.visitInteger_signedness(self)
            else:
                return visitor.visitChildren(self)




    def integer_signedness(self):

        localctx = CoreDSL2Parser.Integer_signednessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_integer_signedness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            _la = self._input.LA(1)
            if not(_la==43 or _la==44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_shorthandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_integer_shorthand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_shorthand" ):
                listener.enterInteger_shorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_shorthand" ):
                listener.exitInteger_shorthand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_shorthand" ):
                return visitor.visitInteger_shorthand(self)
            else:
                return visitor.visitChildren(self)




    def integer_shorthand(self):

        localctx = CoreDSL2Parser.Integer_shorthandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_integer_shorthand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 527765581332480) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_shorthandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_float_shorthand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_shorthand" ):
                listener.enterFloat_shorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_shorthand" ):
                listener.exitFloat_shorthand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_shorthand" ):
                return visitor.visitFloat_shorthand(self)
            else:
                return visitor.visitChildren(self)




    def float_shorthand(self):

        localctx = CoreDSL2Parser.Float_shorthandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_float_shorthand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            _la = self._input.LA(1)
            if not(_la==49 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self._expression = None # ExpressionContext
            self.params = list() # of ExpressionContexts

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = CoreDSL2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(CoreDSL2Parser.T__50)
            self.state = 538
            localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 539
                self.match(CoreDSL2Parser.T__51)
                self.state = 540
                localctx._expression = self.expression(0)
                localctx.params.append(localctx._expression)
                pass
            elif token in [22]:
                self.state = 541
                self.match(CoreDSL2Parser.T__21)
                self.state = 542
                localctx._expression = self.expression(0)
                localctx.params.append(localctx._expression)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 543
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 544
                    localctx._expression = self.expression(0)
                    localctx.params.append(localctx._expression)
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 550
                self.match(CoreDSL2Parser.T__22)
                pass
            elif token in [53]:
                pass
            else:
                pass
            self.state = 554
            self.match(CoreDSL2Parser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_size_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._primary = None # PrimaryContext
            self.size = list() # of PrimaryContexts

        def primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.PrimaryContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.PrimaryContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_bit_size_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_size_specifier" ):
                listener.enterBit_size_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_size_specifier" ):
                listener.exitBit_size_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_size_specifier" ):
                return visitor.visitBit_size_specifier(self)
            else:
                return visitor.visitChildren(self)




    def bit_size_specifier(self):

        localctx = CoreDSL2Parser.Bit_size_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_bit_size_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(CoreDSL2Parser.T__37)
            self.state = 557
            localctx._primary = self.primary()
            localctx.size.append(localctx._primary)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 558
                self.match(CoreDSL2Parser.T__3)
                self.state = 559
                localctx._primary = self.primary()
                localctx.size.append(localctx._primary)
                self.state = 560
                self.match(CoreDSL2Parser.T__3)
                self.state = 561
                localctx._primary = self.primary()
                localctx.size.append(localctx._primary)
                self.state = 562
                self.match(CoreDSL2Parser.T__3)
                self.state = 563
                localctx._primary = self.primary()
                localctx.size.append(localctx._primary)


            self.state = 567
            self.match(CoreDSL2Parser.T__38)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumerator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._enumerator = None # EnumeratorContext
            self.enumerators = list() # of EnumeratorContexts

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.EnumeratorContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_enumerator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator_list" ):
                listener.enterEnumerator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator_list" ):
                listener.exitEnumerator_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator_list" ):
                return visitor.visitEnumerator_list(self)
            else:
                return visitor.visitChildren(self)




    def enumerator_list(self):

        localctx = CoreDSL2Parser.Enumerator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumerator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            localctx._enumerator = self.enumerator()
            localctx.enumerators.append(localctx._enumerator)
            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 570
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 571
                    localctx._enumerator = self.enumerator()
                    localctx.enumerators.append(localctx._enumerator) 
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CoreDSL2Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumerator)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 579
                self.match(CoreDSL2Parser.T__51)
                self.state = 580
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.specifier = None # Struct_declaration_specifierContext
            self._declarator = None # DeclaratorContext
            self.declarators = list() # of DeclaratorContexts

        def struct_declaration_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Struct_declaration_specifierContext,0)


        def declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.DeclaratorContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration" ):
                return visitor.visitStruct_declaration(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration(self):

        localctx = CoreDSL2Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            localctx.specifier = self.struct_declaration_specifier()
            self.state = 584
            localctx._declarator = self.declarator()
            localctx.declarators.append(localctx._declarator)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 585
                self.match(CoreDSL2Parser.T__3)
                self.state = 586
                localctx._declarator = self.declarator()
                localctx.declarators.append(localctx._declarator)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.match(CoreDSL2Parser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaration_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Type_specifierContext
            self._type_qualifier = None # Type_qualifierContext
            self.qualifiers = list() # of Type_qualifierContexts

        def type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_specifierContext,0)


        def type_qualifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_qualifierContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_struct_declaration_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration_specifier" ):
                listener.enterStruct_declaration_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration_specifier" ):
                listener.exitStruct_declaration_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration_specifier" ):
                return visitor.visitStruct_declaration_specifier(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration_specifier(self):

        localctx = CoreDSL2Parser.Struct_declaration_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_struct_declaration_specifier)
        try:
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 91, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                localctx.type_ = self.type_specifier()
                pass
            elif token in [87, 88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                localctx._type_qualifier = self.type_qualifier()
                localctx.qualifiers.append(localctx._type_qualifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self._expression = None # ExpressionContext
            self.size = list() # of ExpressionContexts
            self._attribute = None # AttributeContext
            self.attributes = list() # of AttributeContexts
            self.init = None # InitializerContext

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def LEFT_BR(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.LEFT_BR)
            else:
                return self.getToken(CoreDSL2Parser.LEFT_BR, i)

        def RIGHT_BR(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.RIGHT_BR)
            else:
                return self.getToken(CoreDSL2Parser.RIGHT_BR, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.AttributeContext,i)


        def initializer(self):
            return self.getTypedRuleContext(CoreDSL2Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CoreDSL2Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            localctx.name = self.match(CoreDSL2Parser.IDENTIFIER)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 599
                self.match(CoreDSL2Parser.LEFT_BR)
                self.state = 600
                localctx._expression = self.expression(0)
                localctx.size.append(localctx._expression)
                self.state = 601
                self.match(CoreDSL2Parser.RIGHT_BR)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 608
                localctx._attribute = self.attribute()
                localctx.attributes.append(localctx._attribute)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 614
                self.match(CoreDSL2Parser.T__51)
                self.state = 615
                localctx.init = self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(CoreDSL2Parser.InitializerListContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = CoreDSL2Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 36, 37, 54, 55, 56, 57, 58, 59, 60, 61, 95, 96, 97, 98, 99, 100, 101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                localctx.expr = self.expression(0)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(CoreDSL2Parser.T__4)
                self.state = 620
                self.initializerList()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 621
                    self.match(CoreDSL2Parser.T__3)


                self.state = 624
                self.match(CoreDSL2Parser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designated_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.Designated_initializerContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.Designated_initializerContext,i)


        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.InitializerContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def initializerList(self):

        localctx = CoreDSL2Parser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initializerList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 628
                self.designated_initializer()
                pass

            elif la_ == 2:
                self.state = 629
                self.initializer()
                pass


            self.state = 639
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self.match(CoreDSL2Parser.T__3)
                    self.state = 635
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 633
                        self.designated_initializer()
                        pass

                    elif la_ == 2:
                        self.state = 634
                        self.initializer()
                        pass

             
                self.state = 641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Designated_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._designator = None # DesignatorContext
            self.designators = list() # of DesignatorContexts
            self.init = None # InitializerContext

        def initializer(self):
            return self.getTypedRuleContext(CoreDSL2Parser.InitializerContext,0)


        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.DesignatorContext,i)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_designated_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignated_initializer" ):
                listener.enterDesignated_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignated_initializer" ):
                listener.exitDesignated_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignated_initializer" ):
                return visitor.visitDesignated_initializer(self)
            else:
                return visitor.visitChildren(self)




    def designated_initializer(self):

        localctx = CoreDSL2Parser.Designated_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_designated_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 642
                localctx._designator = self.designator()
                localctx.designators.append(localctx._designator)
                self.state = 645 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==54 or _la==93):
                    break

            self.state = 647
            self.match(CoreDSL2Parser.T__51)
            self.state = 648
            localctx.init = self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx = None # ExpressionContext
            self.prop = None # Token

        def LEFT_BR(self):
            return self.getToken(CoreDSL2Parser.LEFT_BR, 0)

        def RIGHT_BR(self):
            return self.getToken(CoreDSL2Parser.RIGHT_BR, 0)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = CoreDSL2Parser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_designator)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.match(CoreDSL2Parser.LEFT_BR)
                self.state = 651
                localctx.idx = self.expression(0)
                self.state = 652
                self.match(CoreDSL2Parser.RIGHT_BR)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(CoreDSL2Parser.T__53)
                self.state = 655
                localctx.prop = self.match(CoreDSL2Parser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Cast_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.type_ = None # Type_specifierContext
            self.sign = None # Integer_signednessContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)

        def type_specifier(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Type_specifierContext,0)

        def integer_signedness(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Integer_signednessContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_expression" ):
                return visitor.visitCast_expression(self)
            else:
                return visitor.visitChildren(self)


    class Binary_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.bop = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expression" ):
                listener.enterBinary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expression" ):
                listener.exitBinary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_expression" ):
                return visitor.visitBinary_expression(self)
            else:
                return visitor.visitChildren(self)


    class Preinc_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreinc_expression" ):
                listener.enterPreinc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreinc_expression" ):
                listener.exitPreinc_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreinc_expression" ):
                return visitor.visitPreinc_expression(self)
            else:
                return visitor.visitChildren(self)


    class Conditional_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.cond = None # ExpressionContext
            self.bop = None # Token
            self.then_expr = None # ExpressionContext
            self.else_expr = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_expression" ):
                return visitor.visitConditional_expression(self)
            else:
                return visitor.visitChildren(self)


    class Deref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.ref = None # Token
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref_expression" ):
                listener.enterDeref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref_expression" ):
                listener.exitDeref_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref_expression" ):
                return visitor.visitDeref_expression(self)
            else:
                return visitor.visitChildren(self)


    class Prefix_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_expression" ):
                listener.enterPrefix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_expression" ):
                listener.exitPrefix_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefix_expression" ):
                return visitor.visitPrefix_expression(self)
            else:
                return visitor.visitChildren(self)


    class Postinc_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostinc_expression" ):
                listener.enterPostinc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostinc_expression" ):
                listener.exitPostinc_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostinc_expression" ):
                return visitor.visitPostinc_expression(self)
            else:
                return visitor.visitChildren(self)


    class Concat_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.bop = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat_expression" ):
                listener.enterConcat_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat_expression" ):
                listener.exitConcat_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcat_expression" ):
                return visitor.visitConcat_expression(self)
            else:
                return visitor.visitChildren(self)


    class Assignment_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.bop = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_expression" ):
                listener.enterAssignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_expression" ):
                listener.exitAssignment_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_expression" ):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)


    class Method_callContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.ref = None # Token
            self._expression = None # ExpressionContext
            self.args = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call" ):
                listener.enterMethod_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call" ):
                listener.exitMethod_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_call" ):
                return visitor.visitMethod_call(self)
            else:
                return visitor.visitChildren(self)


    class Primary_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(CoreDSL2Parser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_expression" ):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)


    class Slice_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.ExpressionContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.bop = None # Token
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def RIGHT_BR(self):
            return self.getToken(CoreDSL2Parser.RIGHT_BR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,i)

        def LEFT_BR(self):
            return self.getToken(CoreDSL2Parser.LEFT_BR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_expression" ):
                listener.enterSlice_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_expression" ):
                listener.exitSlice_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice_expression" ):
                return visitor.visitSlice_expression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CoreDSL2Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = CoreDSL2Parser.Primary_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 659
                self.primary()
                pass

            elif la_ == 2:
                localctx = CoreDSL2Parser.Deref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 660
                localctx.bop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==54 or _la==55):
                    localctx.bop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 661
                localctx.ref = self.match(CoreDSL2Parser.IDENTIFIER)
                pass

            elif la_ == 3:
                localctx = CoreDSL2Parser.Method_callContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 662
                localctx.ref = self.match(CoreDSL2Parser.IDENTIFIER)
                self.state = 663
                self.match(CoreDSL2Parser.T__21)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4593671826080530432) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 127) != 0):
                    self.state = 664
                    localctx._expression = self.expression(0)
                    localctx.args.append(localctx._expression)
                    self.state = 669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 665
                        self.match(CoreDSL2Parser.T__3)
                        self.state = 666
                        localctx._expression = self.expression(0)
                        localctx.args.append(localctx._expression)
                        self.state = 671
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 674
                self.match(CoreDSL2Parser.T__22)
                pass

            elif la_ == 4:
                localctx = CoreDSL2Parser.Preinc_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 675
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==56 or _la==57):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 676
                localctx.right = self.expression(17)
                pass

            elif la_ == 5:
                localctx = CoreDSL2Parser.Prefix_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 677
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 864691334613565440) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 678
                localctx.right = self.expression(16)
                pass

            elif la_ == 6:
                localctx = CoreDSL2Parser.Prefix_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 679
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==60 or _la==61):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 680
                localctx.right = self.expression(15)
                pass

            elif la_ == 7:
                localctx = CoreDSL2Parser.Cast_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 681
                self.match(CoreDSL2Parser.T__21)
                self.state = 684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 682
                    localctx.type_ = self.type_specifier()
                    pass

                elif la_ == 2:
                    self.state = 683
                    localctx.sign = self.integer_signedness()
                    pass


                self.state = 686
                self.match(CoreDSL2Parser.T__22)
                self.state = 687
                localctx.right = self.expression(14)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 691
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 692
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611685949707911168) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 693
                        localctx.right = self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 694
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 695
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==58 or _la==59):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 696
                        localctx.right = self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 697
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 698
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==65):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 699
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 700
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 701
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 805306371) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 702
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 703
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 704
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==69):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 705
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 706
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 707
                        localctx.bop = self.match(CoreDSL2Parser.T__36)
                        self.state = 708
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 709
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 710
                        localctx.bop = self.match(CoreDSL2Parser.T__69)
                        self.state = 711
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 712
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 713
                        localctx.bop = self.match(CoreDSL2Parser.T__70)
                        self.state = 714
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 715
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 716
                        localctx.bop = self.match(CoreDSL2Parser.T__71)
                        self.state = 717
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = CoreDSL2Parser.Binary_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 718
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 719
                        localctx.bop = self.match(CoreDSL2Parser.T__72)
                        self.state = 720
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = CoreDSL2Parser.Concat_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 721
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 722
                        localctx.bop = self.match(CoreDSL2Parser.T__15)
                        self.state = 723
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 12:
                        localctx = CoreDSL2Parser.Conditional_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.cond = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 724
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 725
                        localctx.bop = self.match(CoreDSL2Parser.T__73)
                        self.state = 726
                        localctx.then_expr = self.expression(0)
                        self.state = 727
                        self.match(CoreDSL2Parser.T__14)
                        self.state = 728
                        localctx.else_expr = self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = CoreDSL2Parser.Assignment_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 731
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 732
                        localctx.right = self.expression(1)
                        pass

                    elif la_ == 14:
                        localctx = CoreDSL2Parser.Slice_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.expr = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 733
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 734
                        localctx.bop = self.match(CoreDSL2Parser.LEFT_BR)
                        self.state = 735
                        localctx.left = self.expression(0)
                        self.state = 738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==15:
                            self.state = 736
                            self.match(CoreDSL2Parser.T__14)
                            self.state = 737
                            localctx.right = self.expression(0)


                        self.state = 740
                        self.match(CoreDSL2Parser.RIGHT_BR)
                        pass

                    elif la_ == 15:
                        localctx = CoreDSL2Parser.Postinc_expressionContext(self, CoreDSL2Parser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 742
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 743
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==56 or _la==57):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Reference_expressionContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.PrimaryContext
            super().__init__(parser)
            self.ref = None # Token
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CoreDSL2Parser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_expression" ):
                listener.enterReference_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_expression" ):
                listener.exitReference_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_expression" ):
                return visitor.visitReference_expression(self)
            else:
                return visitor.visitChildren(self)


    class Constant_expressionContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.PrimaryContext
            super().__init__(parser)
            self.const_expr = None # ConstantContext
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)


    class Literal_expressionContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.PrimaryContext
            super().__init__(parser)
            self._string_literal = None # String_literalContext
            self.literal = list() # of String_literalContexts
            self.copyFrom(ctx)

        def string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CoreDSL2Parser.String_literalContext)
            else:
                return self.getTypedRuleContext(CoreDSL2Parser.String_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expression" ):
                return visitor.visitLiteral_expression(self)
            else:
                return visitor.visitChildren(self)


    class Parens_expressionContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CoreDSL2Parser.PrimaryContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CoreDSL2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParens_expression" ):
                listener.enterParens_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParens_expression" ):
                listener.exitParens_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParens_expression" ):
                return visitor.visitParens_expression(self)
            else:
                return visitor.visitChildren(self)



    def primary(self):

        localctx = CoreDSL2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_primary)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                localctx = CoreDSL2Parser.Reference_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                localctx.ref = self.match(CoreDSL2Parser.IDENTIFIER)
                pass
            elif token in [95, 96, 97, 99]:
                localctx = CoreDSL2Parser.Constant_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                localctx.const_expr = self.constant()
                pass
            elif token in [100, 101]:
                localctx = CoreDSL2Parser.Literal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 752 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 751
                        localctx._string_literal = self.string_literal()
                        localctx.literal.append(localctx._string_literal)

                    else:
                        raise NoViableAltException(self)
                    self.state = 754 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                pass
            elif token in [22]:
                localctx = CoreDSL2Parser.Parens_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 756
                self.match(CoreDSL2Parser.T__21)
                self.state = 757
                localctx.expr = self.expression(0)
                self.state = 758
                self.match(CoreDSL2Parser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCSTRINGCONST(self):
            return self.getToken(CoreDSL2Parser.ENCSTRINGCONST, 0)

        def STRING(self):
            return self.getToken(CoreDSL2Parser.STRING, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_literal" ):
                return visitor.visitString_literal(self)
            else:
                return visitor.visitChildren(self)




    def string_literal(self):

        localctx = CoreDSL2Parser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            _la = self._input.LA(1)
            if not(_la==100 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Integer_constantContext,0)


        def floating_constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Floating_constantContext,0)


        def character_constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Character_constantContext,0)


        def bool_constant(self):
            return self.getTypedRuleContext(CoreDSL2Parser.Bool_constantContext,0)


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = CoreDSL2Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constant)
        try:
            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.integer_constant()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.floating_constant()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 3)
                self.state = 766
                self.character_constant()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 4)
                self.state = 767
                self.bool_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def INTEGER(self):
            return self.getToken(CoreDSL2Parser.INTEGER, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_integer_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_constant" ):
                listener.enterInteger_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_constant" ):
                listener.exitInteger_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_constant" ):
                return visitor.visitInteger_constant(self)
            else:
                return visitor.visitChildren(self)




    def integer_constant(self):

        localctx = CoreDSL2Parser.Integer_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_integer_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            localctx.value = self.match(CoreDSL2Parser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def FLOAT(self):
            return self.getToken(CoreDSL2Parser.FLOAT, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_floating_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_constant" ):
                listener.enterFloating_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_constant" ):
                listener.exitFloating_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloating_constant" ):
                return visitor.visitFloating_constant(self)
            else:
                return visitor.visitChildren(self)




    def floating_constant(self):

        localctx = CoreDSL2Parser.Floating_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_floating_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            localctx.value = self.match(CoreDSL2Parser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def BOOLEAN(self):
            return self.getToken(CoreDSL2Parser.BOOLEAN, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_bool_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_constant" ):
                listener.enterBool_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_constant" ):
                listener.exitBool_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_constant" ):
                return visitor.visitBool_constant(self)
            else:
                return visitor.visitChildren(self)




    def bool_constant(self):

        localctx = CoreDSL2Parser.Bool_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_bool_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            localctx.value = self.match(CoreDSL2Parser.BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def CHARCONST(self):
            return self.getToken(CoreDSL2Parser.CHARCONST, 0)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_character_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_constant" ):
                listener.enterCharacter_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_constant" ):
                listener.exitCharacter_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_constant" ):
                return visitor.visitCharacter_constant(self)
            else:
                return visitor.visitChildren(self)




    def character_constant(self):

        localctx = CoreDSL2Parser.Character_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_character_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            localctx.value = self.match(CoreDSL2Parser.CHARCONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_left_bracketContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BR(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.LEFT_BR)
            else:
                return self.getToken(CoreDSL2Parser.LEFT_BR, i)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_double_left_bracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_left_bracket" ):
                listener.enterDouble_left_bracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_left_bracket" ):
                listener.exitDouble_left_bracket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_left_bracket" ):
                return visitor.visitDouble_left_bracket(self)
            else:
                return visitor.visitChildren(self)




    def double_left_bracket(self):

        localctx = CoreDSL2Parser.Double_left_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_double_left_bracket)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(CoreDSL2Parser.LEFT_BR)
            self.state = 779
            self.match(CoreDSL2Parser.LEFT_BR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_right_bracketContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_BR(self, i:int=None):
            if i is None:
                return self.getTokens(CoreDSL2Parser.RIGHT_BR)
            else:
                return self.getToken(CoreDSL2Parser.RIGHT_BR, i)

        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_double_right_bracket

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_right_bracket" ):
                listener.enterDouble_right_bracket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_right_bracket" ):
                listener.exitDouble_right_bracket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_right_bracket" ):
                return visitor.visitDouble_right_bracket(self)
            else:
                return visitor.visitChildren(self)




    def double_right_bracket(self):

        localctx = CoreDSL2Parser.Double_right_bracketContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_double_right_bracket)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(CoreDSL2Parser.RIGHT_BR)
            self.state = 782
            self.match(CoreDSL2Parser.RIGHT_BR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_data_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_types" ):
                listener.enterData_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_types" ):
                listener.exitData_types(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_types" ):
                return visitor.visitData_types(self)
            else:
                return visitor.visitChildren(self)




    def data_types(self):

        localctx = CoreDSL2Parser.Data_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_data_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            _la = self._input.LA(1)
            if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 70368744179707) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_type_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_qualifier" ):
                listener.enterType_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_qualifier" ):
                listener.exitType_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_qualifier" ):
                return visitor.visitType_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def type_qualifier(self):

        localctx = CoreDSL2Parser.Type_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_type_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Storage_class_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_storage_class_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorage_class_specifier" ):
                listener.enterStorage_class_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorage_class_specifier" ):
                listener.exitStorage_class_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorage_class_specifier" ):
                return visitor.visitStorage_class_specifier(self)
            else:
                return visitor.visitChildren(self)




    def storage_class_specifier(self):

        localctx = CoreDSL2Parser.Storage_class_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_storage_class_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            _la = self._input.LA(1)
            if not(_la==21 or _la==89 or _la==90):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_or_unionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CoreDSL2Parser.RULE_struct_or_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_or_union" ):
                listener.enterStruct_or_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_or_union" ):
                listener.exitStruct_or_union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_or_union" ):
                return visitor.visitStruct_or_union(self)
            else:
                return visitor.visitChildren(self)




    def struct_or_union(self):

        localctx = CoreDSL2Parser.Struct_or_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_struct_or_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            _la = self._input.LA(1)
            if not(_la==91 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 18)
         




