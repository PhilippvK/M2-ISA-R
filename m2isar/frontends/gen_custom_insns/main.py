"""Generate a set of M2-ISA-R metamodel Instructions from a yaml file"""
import argparse
import pickle
from typing import List, Dict, Tuple

from .input_parser import parse
from .instructions_classes import Instruction
from ...metamodel import arch


def create_dummy_core(
	memories: Dict[str, arch.Memory],
	instructions: Dict[Tuple[int, int], arch.Instruction],
	constants: Dict[str, arch.Constant],
) -> arch.CoreDef:
	"""Create a dummy core for M2-ISA-R"""
	functions = {}
	intrinsics = {}
	name = "DummyCore"
	contributing_types = ["MySet"]  # TODO replace with groups specified in yaml
	dummy_core = arch.CoreDef(
		name=name,
		contributing_types=contributing_types,
		template=None,  # type: ignore
		constants=constants,
		memories=memories,
		memory_aliases={},
		functions=functions,
		instructions=instructions,
		instr_classes={32},
		intrinsics=intrinsics,
	)
	return dummy_core


def create_memories() -> Dict[str, arch.Memory]:
	"""create memory sections for the dummy core"""
	main_reg = arch.Memory(
		"X",
		arch.RangeSpec(32),
		size=32,
		attributes={arch.MemoryAttribute.IS_MAIN_REG: []},
	)
	main_mem = arch.Memory(
		"MEM",
		arch.RangeSpec(1 << 32),
		size=8,
		attributes={arch.MemoryAttribute.IS_MAIN_MEM: []},
	)
	pc = arch.Memory(
		"PC",
		arch.RangeSpec(0),
		size=32,
		attributes={arch.MemoryAttribute.IS_PC: []},
	)
	return {"X": main_reg, "MEM": main_mem, "PC": pc}


def generate_m2isar_sets(instructions: List[Instruction], ext_name: str) -> dict[str, arch.InstructionSet]:
	"""Create an M2isar metamodel Instruction set"""
	constants = {
		"XLEN": arch.Constant("XLEN", value=32, attributes={}, size=None, signed=False)
	}
	memories = create_memories()

	# create mm instructions
	mm_instructions = [i.to_metamodel(ext_name) for i in instructions]
	instructions_dict = {(inst.mask, inst.code): inst for inst in mm_instructions}
	# TODO Name
	inst_set = arch.InstructionSet(
		name="WIP",
		extension=[],
		constants=constants,
		memories=memories,
		functions={},
		instructions=instructions_dict,
	)

	return {inst_set.name: inst_set}


def main():
	"""Main app entrypoint"""
	# argument parsing
	parser = argparse.ArgumentParser(description="Instruction generator", add_help=True)
	parser.add_argument("filename", help="Name of the input file")
	parser.add_argument("-o", "--output", default="instructions", help="Output path")
	parser.add_argument(
		"-m",
		"--model",
		default="m2isar",
		choices=["m2isar", "cdsl"],
		help="Choose the output format.\n The CoreDSL2 output is generated by first building the metamodel and then using the coredsl2_set backend",
	)
	args = parser.parse_args()

	# parse input
	# TODO get the meta data from the spec, like the extensions name
	ext_name = "test"
	raw_instructions = parse(args.filename)

	# generate instruction objects
	processed_instructions: List[Instruction] = []
	for inst in raw_instructions:
		processed_instructions.extend(inst.generate())

	# output generated instructions
	if args.model == "m2isar":
		sets = generate_m2isar_sets(processed_instructions, ext_name)
		models = {"sets": sets}
		with open(
			args.output + ".m2isarmodel", "wb"
		) as file:  # TODO append ".m2isarmodel" only if its missing
			pickle.dump(models, file)

	if args.model == "cdsl2":
		raise NotImplementedError("Not currently supported!")
		# generate metamodel

		# run cdsl2 backend


if __name__ == "__main__":
	main()
